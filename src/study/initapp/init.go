package main

// Goでは2つの関数が予約されている。
// init関数(すべてのpackageで使用可能)
// main関数(package mainでしか使用できない)
// この2つの関数は定義される際いかなる引数と戻り値も持たない。
// packageのなかで複数のinit関数を書けるが、packageの中では各ファイルに1つだけのinit関数を書くほうが良い。

// Goプログラムは自動でinit()とmain()をコールする。
// どこかでこの2つの関数をコールする必要はない。
// 各packageのinit関数はオプション。
// しかし、package mainは必ず一つのmain関数を含まなければならない。

// プログラムの初期化と実行はすべてmainパッケージから始まる。
// もしmainパッケージが他のパッケージをインポートしていたら、コンパイル時にその依存パッケージがインポートされる。
// あるパッケージが複数のパッケージに同時にインポートされている場合は、先にその他のパッケージがインポートされ、その後このパッケージの中にあるパッケージクラス定数と変数が初期化される。
// 次にinit関数が(もしあれば)実行され、最後にmain関数が実行される。

// import
// fmtはGo言語の標準ライブラリ。
// GOROOT環境変数で指定されたディレクトリの下にこのモジュールが加えられている。
// Goのインポートは以下の2つの方法で自分の書いたモジュールを追加することができる。
// 1.相対パス
// import "./model" // カレントファイルと同じディレクトリにあるmodelディレクトリ。この方法によるimportはおすすめできない。
// 2.絶対パス
// import "shorturl/model" // gopath/src/shorturl/modelモジュールを追加する
// 他にも特殊なimportがある。

// ドット操作
// import (
//     . "fmt"
// )
// このドット操作の意味は、パッケージがインポートされた後、このパッケージの関数をコールする際、パッケージ名を省略することができる。
// fmt.Println()はPrintln()というように省略できる。

// エイリアス操作
// エイリアス操作は、パッケージ名に他の覚えやすい名前をつけることができる。
// import (
//     f "fmt"
// )
// エイリアス操作の場合、パッケージ関数をコールする際、プレフィックスが自分たちのものになる。
// f.Println()でコールできる。

// _操作
// import (
//     "database/sql"
//     - "github.com/ziutek/mymysql/godrv"
// )
// _操作はこのパッケージをインポートするだけでパッケージの中の関数を直接使うわけではない。
// このパッケージの中にあるinit関数をコールする。

import (
	f "fmt"
)

func init() {
	f.Println("main:init()")
}

func main() {
	f.Println("main:main()")
}
