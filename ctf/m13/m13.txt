Venus

https://book.mynavi.jp/files/user/support/9784839962135/mondai13.zip
配布ファイルは、問題サーバ関連のスクリプトや設定ファイルになっている。


Ubuntu 16.04.2 LTSを用いて問題を解くことを想定している。
攻略対象のサーバのIPアドレスは192.168.11.24とする。
Venusに該当する問題はどのような形式で出題されているのかを調べる。
この問題はセキュリティキャンプ全国大会2016でのCTFの問題。


攻略対象のサーバではどのポートが開いているのかを調べる。
Nmapを用いてサーバに対してポートスキャンを行う。

nmap -sV -p1-65535 192.168.11.24

どのポートでどのサービスが動いているか調べることができる。
実行すると、ssh、httpの他にunknownというサービスが10725番ポートと24154番ポートで動作していることがわかる。

次に具体的なサービス内容を調べる。
netcatコマンドを用いて10725番ポートもしくは24154番ポートにアクセスすることでそれぞれのサービス内容を確認することができるが、今回は「Venus」に該当する問題はどれかを導き出すため、もう少し調査を進める。


サーバの外部からではこれ以上情報を取得できない。
内部から調べる。
ポートスキャンの結果から、SSHが動作していることがわかっているため、SSHでのログインを試す。しかし、サーバに設定されているユーザ名とパスワードがわからないため、推測できるユーザ名とパスワードの組み合わせを試したり、ユーザ名とパスワードの総当たりを行ったりする必要がある。
推測できるユーザ名とパスワードの組み合わせとして、

admin	password
root	password
admin	admin

などが挙げられる。また、攻略対象のサーバが「Raspberry Pi」であるということがわかっているため、

pi	raspberry

も推測できるユーザ名とパスワードの組み合わせとして挙げられる。
SSHでの接続を試した結果、pi、raspberryであることがわかる。

サーバにログインできたらpsコマンドを使って実行中のプロセスを確認する。

ps aux

結果から、「Earth」が10725番ポートで、「Venus」が24154番ポートでそれぞれ動作していることがわかる。これで「Venus」はどの問題に該当するかわかる。


まず、netcatコマンドを用いて攻略対象のサーバの24154番ポートにアクセスする。

nc 192.168.11.24 24154


Probrem #1

Challenge 1/100
78 / 85 = 


のように表示される。
計算式のように見える。試しに計算結果を送信する。


Probrem #1

Challenge 1/100
78 / 85 = 0
Correct!

Challenge 2/100
43 / 24 = 

「Correct!」と表示された。この問題では表示された計算式の計算結果を送信すれば良いようである。また、「Challenge 1/100」と表示されていたものが「Challenge 2/100」に変化していることから、100問正解すればクリアできるのではないかと考えられる。


Probrem #2
The number of the top of the pyramid?

Challenge 1/100
33 49 4 37 18 18 4
answer = 


「Problem #1」を解き終わると「Problem #2」が表示される。
「The number of the top of the pyramid?」という文字列とともに、7つの数が表示される。日本語に訳すと「ピラミッドの頂上の値は何？」になる。
これをキーワードに検索すると、「ピラミッド算(ピラミッド計算)」というものがあることがわかる。
ピラミッド算とは、隣り合うマスにある値を足して上段のマスに記入していく計算。答えは最上段の値になる。試しに、表示された7つの数でピラミッド算を行った結果を送信する。


Probrem #2
The number of the top of the pyramid?

Challenge 1/100
33 49 4 37 18 18 4
answer = 1509
Correct!

Challenge 2/100
29 98 70 12 13 84 15
answer = 


「Correct!」と表示された。
この問題では表示された7つの数でピラミッド算を行った結果を送信すればよい。
100問正解すればクリアできるのではないかと考える。


Problem #3
Please give operators

[ex]
1 ? 2 ? 3 ? 4 = 3
answer = +,*,-

Challenge 1/100
8 ? 8 ? 7 ? 4 = 53
answer = 


「Problem #2」を解き終わると「Problem #3」が表示される。「Please give operators」という文字列とともに、例題が表示される。
例題によると、

1 ? 2 ? 3 ? 4 = 3
に対して
+,*,-
が正解となる。

問題文には「演算子を与えて」とあるので、カンマで区切られた文字は演算子であると考えられる。
試しに、例題の「?」の部分に演算子を当てはめると、

1 + 2 * 3 - 4 = 3

となり、等しい計算式が形成されることがわかった。
これらのことから、表示された計算式の「?」の部分に演算子を当てはめて等しい計算式を構成すれば良いと考えられる。


[ex]
1 ? 2 ? 3 ? 4 = 3
answer = +,*,-

Challenge 1/100
8 ? 8 ? 7 ? 4 = 53
answer = *,-,-
Correct!

Challenge 2/100
2 ? 3 ? 2 ? 4 = 6
answer = 


「Correct!」と表示される。この問題では表示された計算式を等しく構成する演算子の組み合わせを送信すればよい。同様に100問正解すればクリアできると考えられる。


Problem #4

Challenge 1/100
b"89 50 4e 47 0d 0a 1a 0a ...略


Problem #3を解き終わると「Problem #4」が表示される。
謎の文字列だけが表示される。
「b"」で囲われている文字列に着目してみるとバイト列であることがわかる。
次に、このバイト列が何を表しているのかを調べるため、ファイルとして書き出す。
そのプログラムを実行すると「data」という名前でファイルとして書き出される。

bytes_str = '89 50 4e 47 0d 0a 1a ...略'
bytes_arr = bytes_str.split(' ')
bytes_bin = ''

for byte_str in bytes_arr:
    bytes_bin += chr(int(byte_str, 16))

open('data', 'w').write(bytes_bin)


hexdumpコマンドとfileコマンドを用いて書き出されたファイルを調べる。

hexdump -C data
file data


この結果からPNG形式の画像であることがわかる。

画像として表示すると、QRコードであることがわかる。
このQRコードをQRコードリーダーで読み取ると「reccoon」と表示される。
試しに「reccoon」と送信してみる。

「Correct!」と表示される。この問題ではバイト列で表示されたQRコードを読み取った結果を送信すれば良い。同様に100問正解すればクリアできると考える。


ここまで「Venus」に属する各問題について確認してきた。
しかしフラグを入手するためには、各問題100問(合計400問)を全て正解する必要がある。
自動的に問題を解くためのプログラム(以下、ソルバー)が必要になる。


Problem #1では表示された計算式の計算結果を送信する必要があった。
受信したデータから計算式を取り出す。計算式を含むデータは次のようになる。

'Problem #1\n\nChallenge 1/100\n41 + 79 = '

このデータにおいて、計算式は「\n」で分割した時の一番最後の部分であるため、以下のようにして取り出すことができる。


data = 'Problem #1\n\nChallenge 1/100\n41 + 79 = '
formula = data.split('\n')[-1]

# formula = '41 + 79 = '


次に取り出した計算式の計算を行う。ここではevalを用いて計算式を実行する。


formula = formula.split('=')[0]
answer = eval(formula)

# answer = 120


計算結果が得られる。
これらの処理を繰り返し文を用いて100回実行することでフラグを入手できる。


Problem #2
表示された7つの数でピラミッド算を行った結果を送信する必要がある。
受信したデータから7つの数を取り出す。

'Challenge 2/100\n87 69 34 1 47 55 65\nanswer = '

このデータにおいて、7つのの数は「\n」で分割した時の一番最後から2番目の部分。


data = 'Challenge 2/100\n87 69 34 1 47 55 65\nanswer = '
values = data.split('\n')[-2]
values = values.split(' ')	# ピラミッド算を行う際に扱いやすいように、各値を配列で持つ

# values = [u'87', u'69', u'34', u'1', u'47', u'55', u'65']


次に、取り出した7つの数を用いてピラミッド算を行う。今回のピラミッド算では底辺となる値の個数が7個のため次のように計算できる。


answer = int(values[0]) + 6 * int(values[1]) + 15 * int(values[2]) + 20 * int(values[3]) + 15 * int(values[4]) + 6 * int(values[5]) + int(values[6])

# answer = 2131


結果が得られる。これらの処理を繰り返し文を用いて100回実行することでフラグが入手できる。


Problem #3
表示された計算式を等しく構成する演算子の組み合わせを送信する必要がある。
受信したデータから計算式を取り出す。計算式を含むデータは以下のようになっている。


'Challenge 2/100\n9 ? 6 ? 3 ? 8 = 54\nanswer = '


このデータにおいて、計算式は「\n」で分割した時の一番最後から2番目の部分であるため、以下のようにして取り出すことができる。


data = 'Challenge 2/100\n9 ? 6 ? 3 ? 8 = 54\answer = '
formula = data.split('\n')[-2]

# formula = '9 ? 6 ? 3 ? 8 = 54'


次に、取り出した計算式を等しく構成する演算子の組み合わせを調べる。
右辺の値と等しくなるまで全ての演算子の組み合わせを試す。


import itertools

operators = list(itertools.product(('+', '-', '*', '/'), repeat = 3))
# 全ての演算子の組み合わせ

formula, result = formula.split('=')
# formula = '9 ? 6 ? 3 ? 8 '
# result = ' 54'

result = int(result)

for operator in operators:
    answer = formula.replace('?', '%c') % operator
    if eval(answer) == result:
        answer = re.sub(r'\(|\)|\'| ', '', str(operator))

# answer = '*,+,/'


演算子の組み合わせが得られる。
これらの処理を繰り返し文を用いて100回実行することでフラグを入手できる。


Problem #4
バイト列で表示されたQRコードを読み取った結果を送信する必要がある。
受信したデータからQRコードとなるバイト列を取り出す。

"b'89 50 4e 47 0d 0a 1a 0a 00 00 00 0d ...略... 60 82'\n"

このデータにおいて、バイト列は「\n」で分割した時の一番最初であるため、以下のようにして取り出す。


data = "b'89 50 4e 47 0d 0a 1a 0a 00 00 00 ...略... 49 45 4e 44 ae 42 60 82                '\n"
bytes_str = data.split('\n')[0]
bytes_str = bytes_str.replace('b\'', '').replace('\'', '').replace('  ', '')  # 不要な文字を除去
bytes_arr = bytes_str.split(' ')    # ファイルとして書き出す際に扱いやすいように、各値を配列で持つ


次に、取り出したバイト列をファイルに書き出して、QRコードとして読み取る。ここでは「qrtools」を用いてQRコードを読み取る。


import qrtools

png_bin = ''

for byte in bytes_arr:
    if byte is not '':
        png_bin += chr(int(byte, 16))

open('qr.png', w).write(png_bin)

qrcode = qrtools.QR(filename = 'qr.png')
qrcode.decode
answer = qrcode.data

# answer = 'raccoon'


結果が得られる。
これらの処理を繰り返し文を用いて100回実行することでフラグを入手できる。

